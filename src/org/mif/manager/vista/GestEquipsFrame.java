/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.mif.manager.vista;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.mif.manager.interficiepersistencia.GestorBDManagerException;
import org.mif.manager.model.Categoria;
import org.mif.manager.model.Equip;
import org.mif.manager.model.Jugador;

/**
 *
 * @author markos
 */
public class GestEquipsFrame extends javax.swing.JFrame
{
    
    public GestEquipsFrame()
    {
        Utils.setEquips(Utils.getTemporadaActual());
        initComponents();
        carregarCategoriesComboBox();
        carregarEquips();
        // Per fer la busqueda, si feia servir un keyUpEvent, no detectava bé si borraba tot, o si enganxaba coses
        // però he trobat això: https://stackoverflow.com/questions/3953208/value-change-listener-to-jtextfield
        busquedaField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener()
        {
            public void insertUpdate(javax.swing.event.DocumentEvent e)
            { 
                filtrarEquips();
            }
            public void removeUpdate(javax.swing.event.DocumentEvent e) 
            {
                filtrarEquips(); 
            }
            public void changedUpdate(javax.swing.event.DocumentEvent e) 
            {
                filtrarEquips(); 
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enrereButton = new javax.swing.JButton();
        busquedaField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        equipsTable = new javax.swing.JTable();
        afegirButton = new javax.swing.JButton();
        informeJasperButton = new javax.swing.JButton();
        tipusComboBox = new javax.swing.JComboBox<>();
        nomLabel = new javax.swing.JLabel();
        eliminarButton = new javax.swing.JButton();
        editarButton1 = new javax.swing.JButton();
        tipusLabel = new javax.swing.JLabel();
        tempLabel = new javax.swing.JLabel();
        categoriaComboBox = new javax.swing.JComboBox<>();
        tipusLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestió d'equips");
        setResizable(false);

        enrereButton.setText("<");
        enrereButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrereButtonActionPerformed(evt);
            }
        });

        equipsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Tipus", "Categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        equipsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(equipsTable);

        afegirButton.setText("Afegir Nou");
        afegirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afegirButtonActionPerformed(evt);
            }
        });

        informeJasperButton.setBackground(new java.awt.Color(0, 0, 153));
        informeJasperButton.setForeground(new java.awt.Color(255, 255, 255));
        informeJasperButton.setText("Informe amb Jasper");
        informeJasperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informeJasperButtonActionPerformed(evt);
            }
        });

        tipusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tots", "Masculí", "Femení", "Mixte" }));
        tipusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipusComboBoxActionPerformed(evt);
            }
        });

        nomLabel.setText("Nom de l'equip:");

        eliminarButton.setBackground(new java.awt.Color(204, 0, 0));
        eliminarButton.setForeground(new java.awt.Color(255, 255, 255));
        eliminarButton.setText("Eliminar Equip");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        editarButton1.setText("Editar Equip");
        editarButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButton1ActionPerformed(evt);
            }
        });

        tipusLabel.setText("Tipus:");

        tempLabel.setText("Gestionant equips de la "+ Utils.getTemporadaActual());

        categoriaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriaComboBoxActionPerformed(evt);
            }
        });

        tipusLabel1.setText("Categoria:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(afegirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editarButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addComponent(informeJasperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                        .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enrereButton)
                                .addGap(298, 298, 298)
                                .addComponent(tempLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(busquedaField, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nomLabel))
                                .addGap(302, 302, 302)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tipusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tipusLabel))
                                .addGap(119, 119, 119)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(categoriaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tipusLabel1))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(enrereButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(tempLabel)))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomLabel)
                    .addComponent(tipusLabel)
                    .addComponent(tipusLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(busquedaField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipusComboBox)
                    .addComponent(categoriaComboBox))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afegirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(informeJasperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enrereButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrereButtonActionPerformed
        SelGestioFrame selGestFrame = new SelGestioFrame();
        selGestFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_enrereButtonActionPerformed

    private void afegirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afegirButtonActionPerformed
        AfegirEquipFrame afegirFrame = new AfegirEquipFrame();
        afegirFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_afegirButtonActionPerformed

    private void informeJasperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informeJasperButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_informeJasperButtonActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        int filaSel = equipsTable.getSelectedRow();
        if (filaSel == -1)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Has de seleccionar un equip per eliminar!", "Error de selecció", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        int filaReal = equipsTable.convertRowIndexToModel(filaSel);
        int equipId = (int) equipsTable.getModel().getValueAt(filaReal, 0);

        // Carreguem els jugadors de l'equip
        Utils.setJugsDinsEquip(equipId);
        List<Jugador> membres = Utils.getJugadorsDinsEquip();

        boolean eliminar = false;
        if (membres == null || membres.isEmpty())
        {
            eliminar = true;
        }
        else
        {
            int op = javax.swing.JOptionPane.showConfirmDialog(this, "Aquest equip té membres. Estàs segur què vols eliminar-lo?", "Confirmar eliminació", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE);
            if (op == javax.swing.JOptionPane.YES_OPTION)
                eliminar = true;
        }

        if (eliminar)
        {
            try
            {
                Utils.getGBD().eliminarMembresEquip(equipId);
                Equip e = Utils.getGBD().obtenirEquip(equipId);
                int eliminat = Utils.getGBD().eliminarEquip(e);

                if (eliminat == 1)
                {
                    // Borrem la fila de l'equip que hem eliminat
                    ((DefaultTableModel)equipsTable.getModel()).removeRow(filaReal);

                    javax.swing.JOptionPane.showMessageDialog(this, "Equip eliminat correctament.", "Èxit", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    javax.swing.JOptionPane.showMessageDialog(this, "No s'ha pogut eliminar l'equip.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
            catch (GestorBDManagerException ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Error intern: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void editarButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButton1ActionPerformed
        // Obtenim la fila de l'equip seleccionat al JTable
        int filaSel = equipsTable.getSelectedRow();
        
        // Mostrem un diàleg d'error si no selecciona cap fila i interrompem la funció
        if (filaSel == -1)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Has de seleccionar un eequip per poder editar-ho!", "Error de selecció", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Hem d'adaptar quina es la fila "real" que està seleccionada per si l'usuari fa ús del sorter: https://stackoverflow.com/questions/25926070/when-to-use-convertrowindextomodel
        int filaReal = equipsTable.convertRowIndexToModel(filaSel);
        
        // Obtenim l'id de l'equip a editar: https://stackoverflow.com/questions/29345792/java-jtable-getting-the-data-of-the-selected-row
        int equipSel = (int) equipsTable.getModel().getValueAt(filaReal, 0);
        
        EditEquipFrame editEquip = new EditEquipFrame(equipSel);
        editEquip.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_editarButton1ActionPerformed

    private void tipusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipusComboBoxActionPerformed
        filtrarEquips();
    }//GEN-LAST:event_tipusComboBoxActionPerformed

    private void categoriaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriaComboBoxActionPerformed
        filtrarEquips();
    }//GEN-LAST:event_categoriaComboBoxActionPerformed

    // Funció per fer aplicar els filtres seleccionats a la taula dels equips
    private void filtrarEquips()
    {
        DefaultTableModel equipsModel = (DefaultTableModel) equipsTable.getModel();
        equipsModel.setRowCount(0); // Netegem la taula

        // Agafem els valors dels filtres
        String tipusSeleccionat = tipusComboBox.getSelectedItem().toString();
        String categoriaSeleccionada = categoriaComboBox.getSelectedItem().toString();
        String nomBuscat = busquedaField.getText().trim().toLowerCase();

        // I els apliquem a la taula dels equips
        for (Equip equip : Utils.getEquips()) {
            boolean selTipus = tipusSeleccionat.equals("Tots") || equip.getTipus().equalsIgnoreCase(tipusSeleccionat);
            boolean selCat = categoriaSeleccionada.equals("Totes") || equip.getCategoria().getNom().equalsIgnoreCase(categoriaSeleccionada);
            boolean nomBusc = nomBuscat.isEmpty() || equip.getNom().toLowerCase().contains(nomBuscat);

            if (selTipus && selCat && nomBusc) {
                Object[] row = {
                    equip.getId(),
                    equip.getNom(),
                    equip.getTipus(),
                    equip.getCategoria().getNom()
                };
                equipsModel.addRow(row);
            }
        }

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(equipsModel);
        equipsTable.setRowSorter(sorter);
    }

    // Funció per carregar les categories de la BD al combobox
    private void carregarCategoriesComboBox()
    {
        try
        {
            categoriaComboBox.addItem("Totes");

            for (Categoria c : Utils.getGBD().obtenirCategories())
            {
                categoriaComboBox.addItem(c.getNom());
            }
        }
        catch (GestorBDManagerException ex)
        {
            javax.swing.JOptionPane.showMessageDialog(this, "Error carregant categories: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    // Funció per carregar els equips de la BD al combobox
    private void carregarEquips()
    {
        // Obtenim el table model creat automàticament per el disseny
        DefaultTableModel equipsModel = (DefaultTableModel) equipsTable.getModel();

        for (Equip equip : Utils.getEquips())
        {
            Object[] row = {
                equip.getId(),
                equip.getNom(),
                equip.getTipus(),
                equip.getCategoria().getNom()
            };
            equipsModel.addRow(row);
        }
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(equipsModel);
        equipsTable.setRowSorter(sorter);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afegirButton;
    private javax.swing.JTextField busquedaField;
    private javax.swing.JComboBox<String> categoriaComboBox;
    private javax.swing.JButton editarButton1;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JButton enrereButton;
    private javax.swing.JTable equipsTable;
    private javax.swing.JButton informeJasperButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nomLabel;
    private javax.swing.JLabel tempLabel;
    private javax.swing.JComboBox<String> tipusComboBox;
    private javax.swing.JLabel tipusLabel;
    private javax.swing.JLabel tipusLabel1;
    // End of variables declaration//GEN-END:variables
}
